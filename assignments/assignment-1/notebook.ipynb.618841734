{"cells":[{"cell_type":"markdown","source":"# Assignment 1: Introduction to Data Science and Python\n*Group 11: Alexandra Parkegren & Albin Sj√∂strand*\n\n*Hours spent:*","metadata":{"tags":[],"cell_id":"00000-b88a9ae6-6365-4304-90cc-fa3778b68397","output_cleared":false}},{"cell_type":"markdown","source":"___\n## Part 1: Download som data related to GDP per capita and life expentecy.","metadata":{"tags":[],"cell_id":"00001-ef296d0c-9361-42b2-ac9a-157656787f36","output_cleared":false}},{"cell_type":"markdown","source":"**a) Write a Python program that draws a scatter plot of GDP per capita vs. life expentecy. \nState any assumptions and motivate decisions that you make selecting data to be plotted, and in combining data.**\n\n\n","metadata":{"tags":[],"cell_id":"00002-0ff447de-a8da-4180-8f93-57416e98f449","output_cleared":false}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00006-45362eb4-906c-44e4-9e21-3ee0c70332c4","output_cleared":false,"source_hash":"1b70e63","execution_millis":329,"execution_start":1605015030775},"source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nfrom matplotlib.lines import Line2D\nimport numpy as np\n\nyellow1='#dfdf20'\norange1='#ffad33'\nblue1  ='#4da6ff'\ngreen1 ='#5cd65c'\npurple1='#cc33ff'\nred1   ='#ff9980'\nplt.figure(figsize=(16, 8))\n\n\ndf = pd.read_csv(\"life-expectancy-vs-gdp-per-capita.csv\")\n\n\n# only look at countries, remove continents data\n#dftest = df[df['Code'].notna()] # one way to do it\ndf0 = df[pd.notnull(df['Code'])] # official panda way to do it\n\n# select less data - only from 2015\ndf1 = df0.loc[df0['Year'].isin(['2015'])]\n\n# split df \ndfC1 = df1.loc[df1['Continent'].isin(['Asia'])]\ndfC2 = df1.loc[df1['Continent'].isin(['Africa'])]\ndfC3 = df1.loc[df1['Continent'].isin(['Europe'])]\ndfC4 = df1.loc[df1['Continent'].isin(['North America'])]\ndfC5 = df1.loc[df1['Continent'].isin(['South America'])]\ndfC6 = df1.loc[df1['Continent'].isin(['Oceania'])]\n\nplt.scatter(dfC1['GDP per capita'],dfC1['Life expectancy'],color=yellow1)\nplt.scatter(dfC2['GDP per capita'],dfC2['Life expectancy'],color=orange1)\nplt.scatter(dfC3['GDP per capita'],dfC3['Life expectancy'],color=blue1)\nplt.scatter(dfC4['GDP per capita'],dfC4['Life expectancy'],color=green1)\nplt.scatter(dfC5['GDP per capita'],dfC5['Life expectancy'],color=purple1)\nplt.scatter(dfC6['GDP per capita'],dfC6['Life expectancy'],color=red1)\n\n#legend\nl1 = Line2D([0],[0], marker='o', color='w', label='Asia', markerfacecolor=yellow1, markersize=10)\nl2 = Line2D([0],[0], marker='o', color='w', label='Africa', markerfacecolor=orange1, markersize=10)\nl3 = Line2D([0],[0], marker='o', color='w', label='Europe', markerfacecolor=blue1, markersize=10)\nl4 = Line2D([0],[0], marker='o', color='w', label='N America', markerfacecolor=green1, markersize=10)\nl5 = Line2D([0],[0], marker='o', color='w', label='S America', markerfacecolor=purple1, markersize=10)\nl6 = Line2D([0],[0], marker='o', color='w', label='Oceania', markerfacecolor=red1, markersize=10)\nplt.legend(handles=[l1,l2,l3,l4,l5,l6])\n\n\n#plt.figure(figsize=(20,10))\nplt.ylabel('Life expectancy (Year)')\nplt.xlabel('GDP per capita (2011US$)')\nplt.title('Life expectancy vs GDP per capity of the year 2015')\n\n\n#labels\nstyle11 = dict(size=10, color='gray')\nplt.text(139538, 80, \"Qatar\", **style11)\nplt.text(9500, 59, \"Angola\", **style11)\nplt.text(36986, 57, \"Equatorial Guinea\", **style11)\nplt.text(69200, 74.8, \"Kuwait\", **style11)\n\nplt.show()","execution_count":6,"outputs":[{"data":{"text/plain":"<Figure size 1152x576 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","source":"This is a very common graph to show all students in swedish schools, \nespecially since Hans Rosling created GapMinder that illustrates these things.\nTherefor both of us had a similar assumption of how the correlation would look like for this data and the different continents. \n","metadata":{"tags":[],"cell_id":"00005-f73d7cb8-c838-4135-adb6-9e368f08f3f5","output_cleared":false}},{"cell_type":"markdown","source":"**b) Consider whether the results obtained seem resonable and discuss what might be the explanation for the reults you obtained.**\n\nIt seems reasonable with the correlation between GDP per capita and life exptency where countries \nwith lower GDP per capita has a smaller financial basis to, for example, develop a good health care system. \n\nWe see a big variation at the far left where life expectancy differs a lot to similar GDP per capita.\nThis is very resonable considering life expenctancy is way more complex factors that are not considered in this data.\nLife expectancy is only a mean value. For example, child mortality plays a big part in decreasing the life expectancy, \nas we learned from class.\n\nWe also notice how the curve flattens and can understand that in richer countries other factors take part, which can \nfor example be explained by \ndrug overdoses and suicides (source [ourworldindata.org](https://ourworldindata.org/us-life-expectancy-low) )\n\nA high GDP per capita demonstrates a countries assets, not how it is distributed och handle. \nThe GDP per capita of a country might increase while the life expectancy does not, due to not investing in health care.\n\nBut an overall conclusion is that life expecancy seems to increase up to a certain level hand in hand with GDP per capita, \nbut we need to remind ourself that life expectancy is not equal to health and GDP per capita is not equal to wealth.","metadata":{"tags":[],"cell_id":"00005-1d36fbef-1b9c-4510-ac15-01b1ac85d0b2","output_cleared":false}},{"cell_type":"markdown","source":"**c) Did you do any data cleaning (e.g., by removing entries that you think are not useful) for the task of drawing scatter plot(s) and the task of answering the questions d, e, f, and g?\n If so, explain what kind of entries that you chose to remove and why**\n\nThe restriction to only use scatter plot deminished our chances of displaying the history in a simple clear way (as we have seen in our second lecture in the plot called \"life expectancy of the world population in 1800,1950 and 2012\"). \nWe therefor chose the year 2015 seeing that it contained the most data for the most countries and it was one of the latest data found for GDP per capita and life expectancy.\nIt is assumed that data exists in 2015 for all countries.\n\nThe data was cleaned from from continents that was also represented as entities in the table. This was done by removing all country codes that was null, i.e. \nremove continents since they do not have one, with the reason being that we only want to show countries in the graph.\n\nToo not crowd our graph we only chose to include the names of a few countries and instead to plot the continents in different colors.\nYet again if this would have been another type of plot - lets say interactive, this is one of the things we would have liked to include in a nice way.\n\nWe could have removed some countries to simplify the connection between the two datas. \nSince this is a chart comparing average lifespan to different wealth, \ntherefor we could perhaps have removed the countries with the same GDP per capita but different lifespans.\nWe could also have cut out Qatar in the far right of the graph the get a more zoomed in graph.\nBut in our opinion that would have made a much to simplified graph, \ndisplaying a correlation that is not always true. \nToo keep all of the countries is a reminder that there are more complexity behind the reasons for the data.\n\n\nYet again, to avoid crowding the plot we chose not to include extra things like different sizes or gradient of colors for number of inhabitants.\n\nWe notice how all of the countries follow a logarithmic path. \nWe considered encorporated a logarithmic scale on our axis to show a more linear plot but we concluded this also seemed too misguiding.\n","metadata":{"tags":[],"cell_id":"00004-efc8a38c-a39a-4de8-91d5-97ab39d45139","output_cleared":false}},{"cell_type":"markdown","source":"**d) Which countries have a life expectancy higher than one standard deviation above the mean?**","metadata":{"tags":[],"cell_id":"00005-2e8b4fd5-97f4-4bf2-a96a-262f06e104f7","output_cleared":false}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00009-13545a6c-8ee5-423e-9d31-d0d536e80c86","output_cleared":false,"source_hash":"5d426eae","execution_millis":4,"execution_start":1605015031114},"source":"import statistics as stats\nimport numpy as np\n\n# Remove entities with NaNa values\ndfNoNa = df1.dropna()\n\nmean = stats.mean(dfNoNa['Life expectancy'])\nstandard_deviation = df1['Life expectancy'].std()\n\nprint('Mean:', mean)\nprint('Standard deviation:', standard_deviation)\n\n#filter out the countries \nfiltered_df = dfNoNa[(dfNoNa['Life expectancy'] > (mean + standard_deviation))]\n\n#sort by life expectancy\nfiltered_and_sorted_df = filtered_df.sort_values(by=['Life expectancy'])\n\nprint(filtered_and_sorted_df[['Entity', 'Life expectancy']])\n","execution_count":7,"outputs":[{"name":"stdout","text":"Mean: 71.88696385542168\nStandard deviation: 7.799211933631916\n               Entity  Life expectancy\n43690          Taiwan           79.743\n35836           Qatar           79.758\n10720          Cyprus           80.350\n11475         Denmark           80.475\n40001        Slovenia           80.673\n16519         Germany           80.770\n4280          Belgium           80.969\n47277  United Kingdom           81.052\n2730          Austria           81.182\n14540         Finland           81.196\n35546        Portugal           81.224\n20554         Ireland           81.344\n17030          Greece           81.548\n25063      Luxembourg           81.636\n30904     New Zealand           81.713\n30613     Netherlands           81.715\n26673           Malta           81.896\n32338          Norway           81.912\n7572           Canada           82.026\n40977     South Korea           82.100\n15493          France           82.224\n43029          Sweden           82.251\n20845          Israel           82.340\n19445         Iceland           82.481\n2510        Australia           82.794\n21075           Italy           82.828\n39491       Singapore           82.877\n41428           Spain           82.981\n43250     Switzerland           83.142\n21523           Japan           83.879\n19005       Hong Kong           84.043\n","output_type":"stream"}]},{"cell_type":"markdown","source":"** e) Which countries have high life expectancy but have low GDP?**\n\nIt depends on what is considered as low GDP. Countries that are below the mean of GDP per capita (~$18,000) while higher than the mean life expectancy (~72 years)\nare the 40 countries showed in the table below.\n\n","metadata":{"tags":[],"cell_id":"00006-e19aaeb8-ed27-420e-8c38-99927bffe357","output_cleared":false}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00011-64e0a654-3c04-40c4-8209-9676ade06283","output_cleared":false,"source_hash":"99a5b421","execution_millis":0,"execution_start":1605015031154},"source":"gdp_mean = stats.mean(dfNoNa['GDP per capita'])\nle_mean = stats.mean(dfNoNa['Life expectancy'])\n\nfiltered_df = dfNoNa[(dfNoNa['GDP per capita'] <= gdp_mean) & (dfNoNa['Life expectancy'] >= le_mean)]\n\n#print('GDP per capita mean: $', round(gdp_mean, 2))\n#print('Life expectancy mean: ', round(le_mean, 2))\nprint(filtered_df[['Entity', 'GDP per capita', 'Life expectancy']])","execution_count":8,"outputs":[{"name":"stdout","text":"                       Entity  GDP per capita  Life expectancy\n560                   Albania         10947.0           78.025\n780                   Algeria         13024.0           76.090\n2097                  Armenia          9552.0           74.467\n2951               Azerbaijan         16045.0           72.266\n3832                 Barbados         10030.0           78.801\n5520   Bosnia and Herzegovina         10305.0           76.865\n5961                   Brazil         15377.0           74.994\n6472                 Bulgaria         17254.0           74.584\n7792               Cape Verde          6358.0           72.117\n8814                    China         12002.0           75.928\n9036                 Colombia         12858.0           76.531\n9766               Costa Rica         13568.0           79.565\n10430                    Cuba          7889.0           78.561\n11915                Dominica          9537.0           74.194\n12135      Dominican Republic         13382.0           73.241\n12499                 Ecuador         10914.0           76.143\n12947             El Salvador          8163.0           72.412\n16294                 Georgia         10198.0           72.973\n17680               Guatemala          7055.0           73.250\n18785                Honduras          4352.0           74.495\n20110                    Iran         15039.0           75.796\n21295                 Jamaica          7115.0           74.098\n21745                  Jordan         11738.0           74.078\n23743                 Lebanon         12665.0           78.768\n24403                   Libya          8514.0           72.121\n25353               Macedonia         13586.0           75.406\n27901                  Mexico         15766.0           74.904\n29002              Montenegro         17738.0           76.452\n29292                 Morocco          7577.0           75.726\n31124               Nicaragua          4699.0           73.649\n33341               Palestine          4422.0           73.442\n34001                Paraguay          8364.0           73.662\n34222                    Peru         11215.0           75.792\n37148             Saint Lucia         10687.0           75.596\n38829                  Serbia         13556.0           75.309\n41648               Sri Lanka         10734.0           76.316\n44350                Thailand         13938.0           76.091\n45522                 Tunisia         10608.0           75.922\n48672               Venezuela         16257.0           72.584\n48892                 Vietnam          5733.0           75.110\n","output_type":"stream"}]},{"cell_type":"markdown","source":"If the question want to refer to only GDP, we calculate GDP from GDP per capita divided by population \n( [source](http://www.differencebetween.net/business/difference-between-gdp-and-gdp-per-capita/) ).\n\nHere we ","metadata":{"tags":[],"cell_id":"00011-77eb7d58-cc20-42e8-9753-bfb14c675ec2","output_cleared":false}},{"cell_type":"code","source":"gpd_per_capita = dfNoNa['GDP per capita']\npopulation = dfNoNa['Total population']\ngdp = gdp_per_capita * population\n\ngpd_mean = stats.mean(gdp)\ngdp_per_capita_mean = stats.mean(dfNoNa['GDP per capita'])\nle_mean = stats.mean(dfNoNa['Life expectancy'])\n\n\nfiltered_df = dfNoNa[(dfNoNa['GDP per capita'] <= gdp_mean) & (dfNoNa['Life expectancy'] >= le_mean)]\n","metadata":{"tags":[],"cell_id":"00011-d837c2d1-1819-43fe-8e42-a897f76f7f01","output_cleared":false,"source_hash":"8c062169","execution_millis":1,"execution_start":1605016853221},"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"['GDP'] not in index\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-56-a024b7e15952>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mfiltered_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdfNoNa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdfNoNa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'GDP per capita'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mgdp_mean\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdfNoNa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Life expectancy'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mle_mean\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Entity'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'GDP'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Life expectancy'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/opt/venv/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2804\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2805\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2806\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2808\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/venv/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1551\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1552\u001b[0m         self._validate_read_indexer(\n\u001b[0;32m-> 1553\u001b[0;31m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1554\u001b[0m         )\n\u001b[1;32m   1555\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/venv/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1644\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"loc\"\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1645\u001b[0m                 \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1646\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1647\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1648\u001b[0m             \u001b[0;31m# we skip the warning on Categorical/Interval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['GDP'] not in index\""]}],"execution_count":56},{"cell_type":"code","source":"\n#low GDP\ngpd_per_capita = dfNoNa['GDP per capita']\npopulation = dfNoNa['Total population']\ngdp = gdp_per_capita * population\ngpd_mean = stats.mean(gdp)\n\n\n#gdp_per_capita_mean = stats.mean(dfNoNa['GDP per capita'])\n\n#high life expectancy\nle_mean = stats.mean(dfNoNa['Life expectancy'])\nle_standard_deviation = dfNoNa['Life expectancy'].std()\nfiltered_le_df = dfNoNa[(dfNoNa['Life expectancy'] > (mean + standard_deviation))]\n\n\n\nfiltered_gdp_le_df \n= dfNoNa[(dfNoNa['GDP per capita'] <= gdp_mean) & (dfNoNa['Total population'] >= le_mean)]\n\n\nprint(filtered_gdp_le_df[['Entity', 'Life expectancy']])\n\n\n\n\n#keep only countries with high life expectancy\nle_mean = stats.mean(dff['Life expectancy'])\n\n\n\n\n\n\n\n#population = dff['Total population']\n#gdp_per_capita = dff['GDP per capita']\n\n#print(population[1])\n#dff.insert(2, \"GDP\", null)\n#dff.insert(2, \"GDP\", population[50215]*gdp_per_capita[50215])\n\n#for i in len(population):\n#    dff[\"\"].append(population[i]*gdp_per_capita[i])\n#dff\n\n#df0 = df[pd.notnull(df['Code'])] # official panda way to do it\n#df1 = df0.loc[df0['Year'].isin(['2015'])]\n\n# Remove entities with NaNa values\n#dfNoNa = df1[pf.notnull(df1)]\n\n\n#print(population[3]*gdp_per_capita[3])\n#dfNoNa.insert(0, \"GDP\", population[0]*gdp_per_capita[0])\n\n","metadata":{"tags":[],"cell_id":"00013-9f4cd13b-e536-415f-b04b-11e367e7c352","output_cleared":false,"source_hash":"cba70948","execution_millis":190,"execution_start":1605015402021},"outputs":[{"output_type":"execute_result","execution_count":40,"data":{"application/vnd.deepnote.dataframe.v2+json":{"row_count":50220,"column_count":8,"columns":[{"name":"Entity","dtype":"object","stats":{"unique_count":303,"nan_count":0,"categories":[{"name":"France","count":731},{"name":"Sweden","count":720},{"name":"301 others","count":48769}]}},{"name":"Code","dtype":"object"},{"name":"GDP","dtype":"float64"},{"name":"Year","dtype":"int64"},{"name":"Total population","dtype":"float64"},{"name":"Continent","dtype":"object"},{"name":"Life expectancy","dtype":"float64"},{"name":"GDP per capita","dtype":"float64"},{"name":"_deepnote_index_column","dtype":"int64"}],"rows_top":[{"Entity":"Abkhazia","Code":"OWID_ABK","GDP":24257870000,"Year":2015,"Total population":"nan","Continent":"Asia","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":0},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1800,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":1},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1801,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":2},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1802,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":3},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1803,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":4},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1804,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":5},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1805,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":6},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1806,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":7},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1807,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":8},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1808,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":9},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1809,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":10},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1810,"Total population":3280000,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":11},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1811,"Total population":3280779,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":12},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1812,"Total population":3282342,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":13},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1813,"Total population":3284692,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":14},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1814,"Total population":3287834,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":15},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1815,"Total population":3291770,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":16},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1816,"Total population":3296506,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":17},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1817,"Total population":3302044,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":18},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1818,"Total population":3308390,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":19},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1819,"Total population":3315547,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":20},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1820,"Total population":3323519,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":21},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1821,"Total population":3332311,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":22},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1822,"Total population":3341926,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":23},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1823,"Total population":3352368,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":24},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1824,"Total population":3363642,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":25},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1825,"Total population":3375751,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":26},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1826,"Total population":3388701,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":27},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1827,"Total population":3402494,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":28},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1828,"Total population":3417136,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":29},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1829,"Total population":3432630,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":30},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1830,"Total population":3448982,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":31},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1831,"Total population":3466194,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":32},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1832,"Total population":3483492,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":33},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1833,"Total population":3500877,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":34},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1834,"Total population":3518348,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":35},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1835,"Total population":3535906,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":36},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1836,"Total population":3553552,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":37},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1837,"Total population":3571286,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":38},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1838,"Total population":3589109,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":39},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1839,"Total population":3607021,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":40},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1840,"Total population":3625022,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":41},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1841,"Total population":3643112,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":42},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1842,"Total population":3661294,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":43},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1843,"Total population":3679565,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":44},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1844,"Total population":3697928,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":45},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1845,"Total population":3716383,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":46},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1846,"Total population":3734930,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":47},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1847,"Total population":3753569,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":48},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1848,"Total population":3772301,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":49},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1849,"Total population":3791127,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":50},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1850,"Total population":3810047,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":51},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1851,"Total population":3826140,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":52},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1852,"Total population":3842299,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":53},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1853,"Total population":3858524,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":54},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1854,"Total population":3874815,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":55},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1855,"Total population":3891173,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":56},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1856,"Total population":3907598,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":57},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1857,"Total population":3924089,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":58},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1858,"Total population":3940648,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":59},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1859,"Total population":3957274,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":60},{"Entity":"Afghanistan","Code":"AFG","GDP":24257870000,"Year":1860,"Total population":3973968,"Continent":"nan","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":61}],"rows_bottom":[{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1958,"Total population":3537000,"Continent":"nan","Life expectancy":52.098,"GDP per capita":2382,"_deepnote_index_column":50157},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1959,"Total population":3654000,"Continent":"nan","Life expectancy":52.556000000000004,"GDP per capita":2596,"_deepnote_index_column":50158},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1960,"Total population":3777000,"Continent":"nan","Life expectancy":53.019,"GDP per capita":2710,"_deepnote_index_column":50159},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1961,"Total population":3905000,"Continent":"nan","Life expectancy":53.483000000000004,"GDP per capita":2760,"_deepnote_index_column":50160},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1962,"Total population":4039000,"Continent":"nan","Life expectancy":53.946000000000005,"GDP per capita":2636,"_deepnote_index_column":50161},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1963,"Total population":4179000,"Continent":"nan","Life expectancy":54.403,"GDP per capita":2538,"_deepnote_index_column":50162},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1964,"Total population":4323000,"Continent":"nan","Life expectancy":54.849,"GDP per capita":2525,"_deepnote_index_column":50163},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1965,"Total population":4471000,"Continent":"nan","Life expectancy":55.273999999999994,"GDP per capita":2673,"_deepnote_index_column":50164},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1966,"Total population":4623000,"Continent":"nan","Life expectancy":55.67100000000001,"GDP per capita":2595,"_deepnote_index_column":50165},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1967,"Total population":4780000,"Continent":"nan","Life expectancy":56.034,"GDP per capita":2760,"_deepnote_index_column":50166},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1968,"Total population":4942000,"Continent":"nan","Life expectancy":56.361999999999995,"GDP per capita":2868,"_deepnote_index_column":50167},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1969,"Total population":5111000,"Continent":"nan","Life expectancy":56.656000000000006,"GDP per capita":2930,"_deepnote_index_column":50168},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1970,"Total population":5289000,"Continent":"nan","Life expectancy":56.913000000000004,"GDP per capita":3448,"_deepnote_index_column":50169},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1971,"Total population":5477000,"Continent":"nan","Life expectancy":57.135,"GDP per capita":3644,"_deepnote_index_column":50170},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1972,"Total population":5674000,"Continent":"nan","Life expectancy":57.32899999999999,"GDP per capita":3956,"_deepnote_index_column":50171},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1973,"Total population":5878000,"Continent":"nan","Life expectancy":57.50899999999999,"GDP per capita":4027,"_deepnote_index_column":50172},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1974,"Total population":6085000,"Continent":"nan","Life expectancy":57.688,"GDP per capita":4341,"_deepnote_index_column":50173},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1975,"Total population":6294000,"Continent":"nan","Life expectancy":57.891999999999996,"GDP per capita":4142,"_deepnote_index_column":50174},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1976,"Total population":6503000,"Continent":"nan","Life expectancy":58.15,"GDP per capita":4017,"_deepnote_index_column":50175},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1977,"Total population":6713000,"Continent":"nan","Life expectancy":58.47,"GDP per capita":3454,"_deepnote_index_column":50176},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1978,"Total population":6930000,"Continent":"nan","Life expectancy":58.85,"GDP per capita":3916,"_deepnote_index_column":50177},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1979,"Total population":7160000,"Continent":"nan","Life expectancy":59.273999999999994,"GDP per capita":3890,"_deepnote_index_column":50178},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1980,"Total population":7409000,"Continent":"nan","Life expectancy":59.731,"GDP per capita":4003,"_deepnote_index_column":50179},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1981,"Total population":7676000,"Continent":"nan","Life expectancy":60.203,"GDP per capita":4229,"_deepnote_index_column":50180},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1982,"Total population":7958000,"Continent":"nan","Life expectancy":60.65,"GDP per capita":4108,"_deepnote_index_column":50181},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1983,"Total population":8255000,"Continent":"nan","Life expectancy":61.025,"GDP per capita":3915,"_deepnote_index_column":50182},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1984,"Total population":8562000,"Continent":"nan","Life expectancy":61.28,"GDP per capita":3600,"_deepnote_index_column":50183},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1985,"Total population":8877000,"Continent":"nan","Life expectancy":61.356,"GDP per capita":3615,"_deepnote_index_column":50184},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1986,"Total population":9200000,"Continent":"nan","Life expectancy":61.199,"GDP per capita":3492,"_deepnote_index_column":50185},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1987,"Total population":9527000,"Continent":"nan","Life expectancy":60.792,"GDP per capita":3243,"_deepnote_index_column":50186},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1988,"Total population":9849000,"Continent":"nan","Life expectancy":60.136,"GDP per capita":3340,"_deepnote_index_column":50187},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1989,"Total population":10154000,"Continent":"nan","Life expectancy":59.235,"GDP per capita":3369,"_deepnote_index_column":50188},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1990,"Total population":10432000,"Continent":"nan","Life expectancy":58.1,"GDP per capita":3265,"_deepnote_index_column":50189},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1991,"Total population":10681000,"Continent":"nan","Life expectancy":56.748999999999995,"GDP per capita":3280,"_deepnote_index_column":50190},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1992,"Total population":10901000,"Continent":"nan","Life expectancy":55.243,"GDP per capita":2845,"_deepnote_index_column":50191},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1993,"Total population":11093000,"Continent":"nan","Life expectancy":53.653,"GDP per capita":2749,"_deepnote_index_column":50192},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1994,"Total population":11262000,"Continent":"nan","Life expectancy":52.044,"GDP per capita":2913,"_deepnote_index_column":50193},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1995,"Total population":11411000,"Continent":"nan","Life expectancy":50.48,"GDP per capita":2841,"_deepnote_index_column":50194},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1996,"Total population":11541000,"Continent":"nan","Life expectancy":49.00899999999999,"GDP per capita":3032,"_deepnote_index_column":50195},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1997,"Total population":11653000,"Continent":"nan","Life expectancy":47.661,"GDP per capita":3013,"_deepnote_index_column":50196},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1998,"Total population":11747000,"Continent":"nan","Life expectancy":46.466,"GDP per capita":3006,"_deepnote_index_column":50197},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":1999,"Total population":11823000,"Continent":"nan","Life expectancy":45.461000000000006,"GDP per capita":2889,"_deepnote_index_column":50198},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2000,"Total population":11881000,"Continent":"nan","Life expectancy":44.648999999999994,"GDP per capita":2696,"_deepnote_index_column":50199},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2001,"Total population":11924000,"Continent":"nan","Life expectancy":44.01,"GDP per capita":2624,"_deepnote_index_column":50200},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2002,"Total population":11954000,"Continent":"nan","Life expectancy":43.523,"GDP per capita":2376,"_deepnote_index_column":50201},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2003,"Total population":11982000,"Continent":"nan","Life expectancy":43.195,"GDP per capita":1958,"_deepnote_index_column":50202},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2004,"Total population":12020000,"Continent":"nan","Life expectancy":43.065,"GDP per capita":1813,"_deepnote_index_column":50203},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2005,"Total population":12077000,"Continent":"nan","Life expectancy":43.24100000000001,"GDP per capita":1660,"_deepnote_index_column":50204},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2006,"Total population":12155000,"Continent":"nan","Life expectancy":43.853,"GDP per capita":1587,"_deepnote_index_column":50205},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2007,"Total population":12256000,"Continent":"nan","Life expectancy":44.946999999999996,"GDP per capita":1522,"_deepnote_index_column":50206},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2008,"Total population":12380000,"Continent":"nan","Life expectancy":46.504,"GDP per capita":1260,"_deepnote_index_column":50207},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2009,"Total population":12527000,"Continent":"nan","Life expectancy":48.449,"GDP per capita":1329,"_deepnote_index_column":50208},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2010,"Total population":12698000,"Continent":"nan","Life expectancy":50.64,"GDP per capita":1425,"_deepnote_index_column":50209},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2011,"Total population":12894000,"Continent":"nan","Life expectancy":52.896,"GDP per capita":1515,"_deepnote_index_column":50210},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2012,"Total population":13115000,"Continent":"nan","Life expectancy":55.032,"GDP per capita":1623,"_deepnote_index_column":50211},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2013,"Total population":13350000,"Continent":"nan","Life expectancy":56.897,"GDP per capita":1801,"_deepnote_index_column":50212},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2014,"Total population":13587000,"Continent":"nan","Life expectancy":58.41,"GDP per capita":1797,"_deepnote_index_column":50213},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2015,"Total population":13815000,"Continent":"Africa","Life expectancy":59.534,"GDP per capita":1759,"_deepnote_index_column":50214},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2016,"Total population":14030000,"Continent":"nan","Life expectancy":60.294,"GDP per capita":1729,"_deepnote_index_column":50215},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2017,"Total population":14237000,"Continent":"nan","Life expectancy":60.812,"GDP per capita":"nan","_deepnote_index_column":50216},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2018,"Total population":14439000,"Continent":"nan","Life expectancy":61.195,"GDP per capita":"nan","_deepnote_index_column":50217},{"Entity":"Zimbabwe","Code":"ZWE","GDP":24257870000,"Year":2019,"Total population":14645000,"Continent":"nan","Life expectancy":61.49,"GDP per capita":"nan","_deepnote_index_column":50218},{"Entity":"√Öland Islands","Code":"ALA","GDP":24257870000,"Year":2015,"Total population":"nan","Continent":"Europe","Life expectancy":"nan","GDP per capita":"nan","_deepnote_index_column":50219}]},"text/plain":"              Entity      Code           GDP  Year  Total population  \\\n0           Abkhazia  OWID_ABK  2.425787e+10  2015               NaN   \n1        Afghanistan       AFG  2.425787e+10  1800         3280000.0   \n2        Afghanistan       AFG  2.425787e+10  1801         3280000.0   \n3        Afghanistan       AFG  2.425787e+10  1802         3280000.0   \n4        Afghanistan       AFG  2.425787e+10  1803         3280000.0   \n...              ...       ...           ...   ...               ...   \n50215       Zimbabwe       ZWE  2.425787e+10  2016        14030000.0   \n50216       Zimbabwe       ZWE  2.425787e+10  2017        14237000.0   \n50217       Zimbabwe       ZWE  2.425787e+10  2018        14439000.0   \n50218       Zimbabwe       ZWE  2.425787e+10  2019        14645000.0   \n50219  √Öland Islands       ALA  2.425787e+10  2015               NaN   \n\n      Continent  Life expectancy  GDP per capita  \n0          Asia              NaN             NaN  \n1           NaN              NaN             NaN  \n2           NaN              NaN             NaN  \n3           NaN              NaN             NaN  \n4           NaN              NaN             NaN  \n...         ...              ...             ...  \n50215       NaN           60.294          1729.0  \n50216       NaN           60.812             NaN  \n50217       NaN           61.195             NaN  \n50218       NaN           61.490             NaN  \n50219    Europe              NaN             NaN  \n\n[50220 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Entity</th>\n      <th>Code</th>\n      <th>GDP</th>\n      <th>Year</th>\n      <th>Total population</th>\n      <th>Continent</th>\n      <th>Life expectancy</th>\n      <th>GDP per capita</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abkhazia</td>\n      <td>OWID_ABK</td>\n      <td>2.425787e+10</td>\n      <td>2015</td>\n      <td>NaN</td>\n      <td>Asia</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Afghanistan</td>\n      <td>AFG</td>\n      <td>2.425787e+10</td>\n      <td>1800</td>\n      <td>3280000.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Afghanistan</td>\n      <td>AFG</td>\n      <td>2.425787e+10</td>\n      <td>1801</td>\n      <td>3280000.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Afghanistan</td>\n      <td>AFG</td>\n      <td>2.425787e+10</td>\n      <td>1802</td>\n      <td>3280000.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Afghanistan</td>\n      <td>AFG</td>\n      <td>2.425787e+10</td>\n      <td>1803</td>\n      <td>3280000.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>50215</th>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>2.425787e+10</td>\n      <td>2016</td>\n      <td>14030000.0</td>\n      <td>NaN</td>\n      <td>60.294</td>\n      <td>1729.0</td>\n    </tr>\n    <tr>\n      <th>50216</th>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>2.425787e+10</td>\n      <td>2017</td>\n      <td>14237000.0</td>\n      <td>NaN</td>\n      <td>60.812</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50217</th>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>2.425787e+10</td>\n      <td>2018</td>\n      <td>14439000.0</td>\n      <td>NaN</td>\n      <td>61.195</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50218</th>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>2.425787e+10</td>\n      <td>2019</td>\n      <td>14645000.0</td>\n      <td>NaN</td>\n      <td>61.490</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50219</th>\n      <td>√Öland Islands</td>\n      <td>ALA</td>\n      <td>2.425787e+10</td>\n      <td>2015</td>\n      <td>NaN</td>\n      <td>Europe</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>50220 rows √ó 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":40},{"cell_type":"markdown","source":"**f) Does every strong economy (normally indicated by GDP) have high life expectancy?**\n\nNot necessarily, as we clearly can see in our first plot.\nKuwait with one of the highest GDP only have around 75 years in lifeexpectancy, which is not far from the mean value of all countries.","metadata":{"tags":[],"cell_id":"00007-6a637f71-81c8-40ba-802b-d31d93330520","output_cleared":false}},{"cell_type":"markdown","source":"**g) Related to question f, what would happen if you use GDP per capita as an indicator of strong economy? \nExplain the results you obtained, and discuss any insights you get from comparing the results of g and f.**'\n\nThe immediate natural way of interpret someting is to simplify even a simple graph, \nhence think of GDP as a countrys wealth. And since GDP per capita is so commonly used, have been used for so long and will be used since it is easy to find the data for so many coutries,\nits understandable that we make the connection. \n\nBut just like all data and all types of charts it can be very misleading.\nFor example thinking nothing have happened in some vs understanding that there are different factors to be taken into consideration.\nTo once again mention Hans Rosling that underlined in his presentations that \nwe all look at things with a lot of preconceptions. \n\nIf all charts could be considered as only suggestions to what to dig deeper into, charts would feel more safe to use.\n \nGDP per capita show us some of a countries assets, but we understand that an economy is much more complex.\nFor example a country can have more assets in natural resources that does not show up in GDP, and that the economy is heavily affected by the countries own politics and what other countries do.\n\n","metadata":{"tags":[],"cell_id":"00008-714d487e-ca0d-4a49-9275-f51476cce661","output_cleared":false}},{"cell_type":"markdown","source":"___\n## Part 2: Download some other data sets, e.g. related to hapiness and life satisfaction, trust, currption, etc.","metadata":{"tags":[],"cell_id":"00009-52143611-1481-4ee8-bffc-094c6b87af91","output_cleared":false}},{"cell_type":"markdown","source":"**a) Think of several meaningful questions that can be answered with these data, make several informative visualisations to answer those questions. \nState any assumptions and motivate decisions that you make when selecting data to be plotted, and in combining data.**\n\nAre life satisfaction correlated with curruption in contries?\n\nIs the Human Development Index (HDI) related to happiness?\n\nDoes inequalirt (Gini coefficient) affect happiness?\n\n","metadata":{"tags":[],"cell_id":"00010-8e519ff5-a7b7-4706-b4ec-568c6230ac10","output_cleared":false}},{"cell_type":"code","metadata":{"tags":[],"cell_id":"00015-b97bc7ab-3c8e-4549-a112-1f2c0ccd3f3d","output_cleared":false,"source_hash":"7dbd0973","execution_millis":102},"source":"df_lifesat  = pd.read_csv(\"Happiness-WVS-vs-Gallup.csv\")\ndf_inequality = pd.read_csv(\"gini.csv\")\ndf_hdi = pd.read_csv(\"hdi_human_development_index.csv\")\ndf_corruption = pd.read_csv(\"TI-corruption-perception-index.csv\")\ndf_happiness = pd.read_csv(\"happiness-cantril-ladder.csv\")\n\ndf_lifesat_2014 = df_lifesat.loc[df_lifesat['Year'].isin(['2014'])]\nprint(df_lifesat_2014)\n\n","outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**b) Discuss any observations that you make, or insights obtained, from the datavisualisations.**","metadata":{"tags":[],"cell_id":"00011-1d14c411-c66c-47b3-a985-35d9ba755aac","output_cleared":false}}],"nbformat":4,"nbformat_minor":2,"metadata":{"orig_nbformat":2,"deepnote_notebook_id":"1fa30ab1-1571-42ca-87b4-f3c7c69565e7","deepnote_execution_queue":[]}}